Classe MiniExcursionPlanifiee{

public function getEstComplete(){

	$nombresPlaces = $this->laMiniExcursion.getnombrePlaces;
	$nombresInscrits= $this->getNombresInscrits;

	if ($nombresInscrits==$nombresPlaces){
            $bool = TRUE;
        }else{
            $bool = FALSE;        

        }

        return $bool;

}

}

Classe MiniExcursionPayante

//Héritage
extends MiniExcursion;

//Attributs privés
unTarif : tarif

//Constructeur

//Méthodes



Création AjoutEtape

public function ajouteEtape($unNumEtape, $uneDescription, $uneDureePrevue){
	
	$unNumEtape = $this->Etape.setnumEtape;
	$uneDescription = $this->Etape.setdescription;
	$uneDureePrevue = $this->Etape.setdureePrevue;
	
	$aNumEtape = $this->Etape.getnumEtape;
	

	if ($){
            $a_bool = TRUE;
	    $
        }else{
            $a_bool = FALSE;        

        }

        return $a_bool;

}

Création AjoutEtapeV2

public function ajouteEtape($unNumEtape, $uneDescription, $uneDureePrevue){
	
	//cardinal() == count()
	$card = this->lesEtapes->Cardinal();
	for $i de 0 à $card

		$uneEtape = this->lesEtapes->extraire($i);

		return getNumEtape($i);

	}
	

	if ($){
            $
	    $
        }else{
            $       

function ajouteEtape($unNumEtape, $uneDescription, $uneDureePrevue){
	$trouve =FALSE;
	//cardinal() == count()
	$nb_etapes = this->lesEtapes->Cardinal();
	for ($i = 0; $i<$nb_etapes; $i++){                 //Tant que nontrouvé et $i <nbEtapes

		$uneEtape = this->lesEtapes->extraire($i);
		$numero = $unEtape->getNumEtape();
		
		if($numero == $unNumEtape){
			$trouve = TRUE;
		}

		return getNumEtape($i);

	}

	if ($trouve ==FALSE){
            $uneEtape = new Etape;
	    $uneEtape.int($unNumEtape, $uneDescription, $uneDureePrevue);
	    $this->lesEtapes->Ajouter($uneEtape);
	    return TRUE;
        }else{
            
	    return FALSE;      

        }

}